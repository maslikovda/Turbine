#ifndef PID_H
#define PID_H

#include "stdint.h"
#include "stdio.h"
#include "FPGA.h"
#include <math.h>

// Включить/отключить приём PID коэффициентов из шины.
// Если отключить, то используются коэффициенты настроенные заранее.
#define PID_COEF_FROM_BUS

// Оффсет для выхода ПИД регулятора. Требуется для работы с частотником.
//  У частотника направление движения определяется следующим образом:
// Выход 0.5 — это стоп. Нулевая скорость.
// Выход меньше 0.5 — это вращение против часовой стрелки.
// Выход больше 0.5 — это вращение по часовой стрелке.
#define PID_OUTPUT_OFFSET         0.5

/**
   \brief          Инициализирует структуру fpga_rxData_t PID коэффициентами
   \param [in]     rxStruct       Ссылка на структуру fpga_rxData_t
   \param [in]     Kp             Пропорциональный коэфф ПИД регулятора
   \param [in]     Ti             Интегральный коэфф ПИД регулятора
   \param [in]     Td             Дифференциальный коэфф ПИД регулятора
   \param [in]     Tf             ?? коэфф ПИД регулятора
 */
void PID_Init(fpga_rxData_t *rxStruct, double Kp, double Ti, double Td, double Tf);

/**
   \brief          				Функция обновляет выходное значение регулятора на основе входных данных
   \details        				Функция рассчитывает выходное воздействие необходимое для равновесия системы
   \details        				Если включен режим слежения, то на выход регулятора дублируем Safe_Pos или Track_V
   \details        				Также регулируется скорость выхода в пределах 0..1.0
   \details        				Если установлен флаг "Запрет больше", то регулятор запрещает увеличиваться выходному сигналу
   \details        				Если установлен флаг "Запрет меньше", то регулятор запрещает уменьшаться выходному сигналу
   \param [in]     txData       Ссылка на структуру fpga_txData_t
   \param [in]     rxData       Ссылка на структуру fpga_rxData_t
   \param [in]     _gpioOutput  Ссылка на структуру gpio_output_state_t, для обработки дискретных входов
   \param [in]     error        Ошибка регулирования. Разница между уставкой и измеренным сигналом
 return         				необходимое воздействие на систему, для достижения уставки
 */
double PID_Update(fpga_txData_t *txData, fpga_rxData_t *rxData, gpio_output_state_t *_gpioOutput, double error);

/**
  \brief         				Функция делает все необходимые действия для работы ПИД регулятора
  \details        				просто требуется вызвать эту функцию из главной программы
  \details        				если модуль работает без получения данных из шины, то перед вызовом данной функции требуется инициализация
 */
void processPID(void);

#endif // PID_H
